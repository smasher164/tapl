// Code generated by goyacc -l -p stlc -o parse.go parse.y. DO NOT EDIT.
//
//go:generate goyacc -l -p stlc -o parse.go parse.y
package main

import __yyfmt__ "fmt"

import "strconv"

type stlcSymType struct {
	yys    int
	text   []byte
	intval int
	x      Term
	t      Ty
	c      Command
	cl     []Command
	f      Field
	r      Record
	cs     []C
	ce     C
	tf     TyField
	tr     []TyField
}

const TrueTok = 57346
const FalseTok = 57347
const UnitTok = 57348
const NatTok = 57349
const IsZeroTok = 57350
const PredTok = 57351
const SuccTok = 57352
const IfTok = 57353
const ThenTok = 57354
const ElseTok = 57355
const LparenTok = 57356
const RparenTok = 57357
const LambdaTok = 57358
const ColonTok = 57359
const DotTok = 57360
const BoolTok = 57361
const SkinnyArrowTok = 57362
const SemicolonTok = 57363
const EqualsTok = 57364
const UnitValTok = 57365
const LetTok = 57366
const InTok = 57367
const FixTok = 57368
const LbraceTok = 57369
const RbraceTok = 57370
const CommaTok = 57371
const LessThanTok = 57372
const GreaterThanTok = 57373
const AsTok = 57374
const CaseTok = 57375
const OfTok = 57376
const OrTok = 57377
const FatArrowTok = 57378
const LetRecTok = 57379
const UnderscoreTok = 57380
const LCIDTok = 57381
const UCIDTok = 57382
const IntTok = 57383

var stlcToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"TrueTok",
	"FalseTok",
	"UnitTok",
	"NatTok",
	"IsZeroTok",
	"PredTok",
	"SuccTok",
	"IfTok",
	"ThenTok",
	"ElseTok",
	"LparenTok",
	"RparenTok",
	"LambdaTok",
	"ColonTok",
	"DotTok",
	"BoolTok",
	"SkinnyArrowTok",
	"SemicolonTok",
	"EqualsTok",
	"UnitValTok",
	"LetTok",
	"InTok",
	"FixTok",
	"LbraceTok",
	"RbraceTok",
	"CommaTok",
	"LessThanTok",
	"GreaterThanTok",
	"AsTok",
	"CaseTok",
	"OfTok",
	"OrTok",
	"FatArrowTok",
	"LetRecTok",
	"UnderscoreTok",
	"LCIDTok",
	"UCIDTok",
	"IntTok",
}

var stlcStatenames = [...]string{}

const stlcEofCode = 1
const stlcErrCode = 2
const stlcInitialStackSize = 16

var stlcExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const stlcPrivate = 57344

const stlcLast = 267

var stlcAct = [...]uint8{
	4, 7, 13, 93, 55, 48, 37, 36, 83, 33,
	31, 46, 38, 127, 72, 86, 73, 41, 42, 43,
	44, 35, 34, 113, 47, 51, 52, 39, 20, 21,
	63, 132, 16, 17, 14, 112, 70, 126, 23, 45,
	130, 115, 106, 95, 54, 104, 64, 22, 78, 103,
	15, 24, 128, 77, 25, 111, 110, 2, 81, 28,
	114, 74, 124, 32, 29, 26, 88, 80, 79, 91,
	92, 87, 69, 68, 30, 82, 109, 47, 81, 51,
	99, 100, 89, 90, 98, 53, 101, 96, 97, 108,
	102, 81, 81, 58, 57, 81, 40, 76, 27, 105,
	71, 59, 67, 66, 75, 107, 56, 65, 118, 119,
	120, 121, 122, 116, 61, 125, 123, 62, 20, 21,
	1, 117, 16, 17, 14, 8, 85, 60, 23, 131,
	9, 84, 94, 49, 133, 3, 31, 22, 10, 18,
	15, 24, 129, 19, 25, 0, 0, 11, 0, 0,
	0, 12, 0, 5, 6, 26, 20, 21, 0, 0,
	16, 17, 14, 8, 0, 0, 23, 0, 9, 0,
	0, 0, 0, 0, 0, 22, 10, 0, 15, 24,
	0, 0, 25, 0, 0, 11, 0, 0, 0, 12,
	0, 32, 0, 26, 20, 21, 0, 0, 16, 17,
	14, 8, 20, 21, 23, 0, 9, 0, 0, 0,
	0, 0, 23, 22, 10, 0, 15, 24, 0, 0,
	25, 22, 0, 11, 0, 24, 0, 12, 25, 50,
	0, 26, 58, 57, 0, 0, 0, 32, 0, 26,
	59, 0, 0, 0, 0, 56, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 62, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 60,
}

var stlcPact = [...]int16{
	114, -1000, -1000, 77, -1000, 42, 52, 198, 152, -17,
	-32, 152, -12, 78, 198, 198, 198, 198, -1000, 7,
	-1000, -1000, -1000, 152, 190, -13, -1000, 114, 226, 152,
	226, 78, -1000, 95, 86, 85, 51, 50, 2, 83,
	-25, 78, 78, 78, 78, 226, 89, 76, 25, 19,
	46, -1000, 45, -1000, 72, -1000, -1000, -1000, -1000, 226,
	-1000, 87, 87, -1000, 72, 152, 226, 226, 152, 152,
	13, 226, -1000, -1000, 72, -1000, 152, -1000, 190, 152,
	152, 226, 75, 21, 16, 82, 72, 11, 92, 71,
	58, 31, 30, -1000, 0, -16, 38, -1000, -1000, -1000,
	10, -1000, -1000, -1000, 87, 226, -1000, 152, 152, 152,
	152, 152, 13, 40, 152, 5, -1000, 72, -1000, -1000,
	-1000, -1000, -1000, -1000, -26, 27, 226, 9, 152, 72,
	-5, -1000, 24, 198,
}

var stlcPgo = [...]uint8{
	0, 0, 1, 143, 2, 139, 11, 15, 4, 135,
	57, 133, 5, 3, 132, 131, 8, 120,
}

var stlcR1 = [...]int8{
	0, 17, 10, 10, 9, 9, 9, 9, 9, 1,
	1, 1, 1, 1, 1, 1, 1, 13, 13, 14,
	2, 2, 2, 2, 2, 2, 5, 5, 4, 4,
	4, 6, 6, 3, 3, 3, 3, 3, 3, 3,
	3, 12, 12, 12, 11, 11, 7, 7, 8, 8,
	8, 8, 8, 8, 8, 16, 16, 16, 15, 15,
}

var stlcR2 = [...]int8{
	0, 1, 3, 0, 1, 3, 3, 1, 3, 1,
	6, 6, 6, 6, 6, 4, 8, 1, 3, 7,
	1, 2, 2, 2, 2, 2, 1, 3, 1, 3,
	3, 1, 3, 1, 1, 1, 1, 3, 3, 7,
	1, 1, 3, 0, 3, 1, 1, 3, 1, 1,
	1, 3, 1, 3, 3, 1, 3, 0, 3, 1,
}

var stlcChk = [...]int16{
	-1000, -17, -10, -9, -1, 39, 40, -2, 11, 16,
	24, 33, 37, -4, 10, 26, 8, 9, -5, -3,
	4, 5, 23, 14, 27, 30, 41, 21, 17, 22,
	22, -4, 39, -1, 39, 38, 39, 38, -1, 39,
	18, -4, -4, -4, -4, 32, -6, -1, -12, -11,
	39, -1, 39, -10, -7, -8, 19, 7, 6, 14,
	40, 27, 30, -1, -7, 12, 17, 17, 22, 22,
	34, 17, 39, 41, -7, 15, 21, 28, 29, 22,
	22, 20, -7, -16, -15, 39, -7, -16, -1, -7,
	-7, -1, -1, -13, -14, 30, -7, -6, -12, -1,
	-1, -8, 15, 28, 29, 17, 31, 13, 18, 18,
	25, 25, 35, 39, 22, 31, -16, -7, -1, -1,
	-1, -1, -1, -13, 22, -1, 32, 39, 25, -7,
	31, -1, 36, -2,
}

var stlcDef = [...]int8{
	3, -2, 1, 0, 4, 36, 7, 9, 0, 0,
	0, 0, 0, 20, 0, 0, 0, 0, 28, 26,
	33, 34, 35, 0, 43, 0, 40, 3, 0, 0,
	0, 21, 36, 0, 0, 0, 0, 0, 0, 0,
	0, 22, 23, 24, 25, 0, 0, 31, 0, 41,
	36, 45, 0, 2, 5, 46, 48, 49, 50, 0,
	52, 57, 57, 6, 8, 0, 0, 0, 0, 0,
	0, 0, 29, 30, 27, 37, 0, 38, 43, 0,
	0, 0, 0, 0, 55, 0, 59, 0, 0, 0,
	0, 0, 0, 15, 17, 0, 0, 32, 42, 44,
	0, 47, 51, 53, 57, 0, 54, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 56, 58, 10, 11,
	12, 13, 14, 18, 0, 0, 0, 0, 0, 39,
	0, 16, 0, 19,
}

var stlcTok1 = [...]int8{
	1,
}

var stlcTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
}

var stlcTok3 = [...]int8{
	0,
}

var stlcErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	stlcDebug        = 0
	stlcErrorVerbose = false
)

type stlcLexer interface {
	Lex(lval *stlcSymType) int
	Error(s string)
}

type stlcParser interface {
	Parse(stlcLexer) int
	Lookahead() int
}

type stlcParserImpl struct {
	lval  stlcSymType
	stack [stlcInitialStackSize]stlcSymType
	char  int
}

func (p *stlcParserImpl) Lookahead() int {
	return p.char
}

func stlcNewParser() stlcParser {
	return &stlcParserImpl{}
}

const stlcFlag = -1000

func stlcTokname(c int) string {
	if c >= 1 && c-1 < len(stlcToknames) {
		if stlcToknames[c-1] != "" {
			return stlcToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func stlcStatname(s int) string {
	if s >= 0 && s < len(stlcStatenames) {
		if stlcStatenames[s] != "" {
			return stlcStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func stlcErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !stlcErrorVerbose {
		return "syntax error"
	}

	for _, e := range stlcErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + stlcTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(stlcPact[state])
	for tok := TOKSTART; tok-1 < len(stlcToknames); tok++ {
		if n := base + tok; n >= 0 && n < stlcLast && int(stlcChk[int(stlcAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if stlcDef[state] == -2 {
		i := 0
		for stlcExca[i] != -1 || int(stlcExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; stlcExca[i] >= 0; i += 2 {
			tok := int(stlcExca[i])
			if tok < TOKSTART || stlcExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if stlcExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += stlcTokname(tok)
	}
	return res
}

func stlclex1(lex stlcLexer, lval *stlcSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(stlcTok1[0])
		goto out
	}
	if char < len(stlcTok1) {
		token = int(stlcTok1[char])
		goto out
	}
	if char >= stlcPrivate {
		if char < stlcPrivate+len(stlcTok2) {
			token = int(stlcTok2[char-stlcPrivate])
			goto out
		}
	}
	for i := 0; i < len(stlcTok3); i += 2 {
		token = int(stlcTok3[i+0])
		if token == char {
			token = int(stlcTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(stlcTok2[1]) /* unknown char */
	}
	if stlcDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", stlcTokname(token), uint(char))
	}
	return char, token
}

func stlcParse(stlclex stlcLexer) int {
	return stlcNewParser().Parse(stlclex)
}

func (stlcrcvr *stlcParserImpl) Parse(stlclex stlcLexer) int {
	var stlcn int
	var stlcVAL stlcSymType
	var stlcDollar []stlcSymType
	_ = stlcDollar // silence set and not used
	stlcS := stlcrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	stlcstate := 0
	stlcrcvr.char = -1
	stlctoken := -1 // stlcrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		stlcstate = -1
		stlcrcvr.char = -1
		stlctoken = -1
	}()
	stlcp := -1
	goto stlcstack

ret0:
	return 0

ret1:
	return 1

stlcstack:
	/* put a state and value onto the stack */
	if stlcDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", stlcTokname(stlctoken), stlcStatname(stlcstate))
	}

	stlcp++
	if stlcp >= len(stlcS) {
		nyys := make([]stlcSymType, len(stlcS)*2)
		copy(nyys, stlcS)
		stlcS = nyys
	}
	stlcS[stlcp] = stlcVAL
	stlcS[stlcp].yys = stlcstate

stlcnewstate:
	stlcn = int(stlcPact[stlcstate])
	if stlcn <= stlcFlag {
		goto stlcdefault /* simple state */
	}
	if stlcrcvr.char < 0 {
		stlcrcvr.char, stlctoken = stlclex1(stlclex, &stlcrcvr.lval)
	}
	stlcn += stlctoken
	if stlcn < 0 || stlcn >= stlcLast {
		goto stlcdefault
	}
	stlcn = int(stlcAct[stlcn])
	if int(stlcChk[stlcn]) == stlctoken { /* valid shift */
		stlcrcvr.char = -1
		stlctoken = -1
		stlcVAL = stlcrcvr.lval
		stlcstate = stlcn
		if Errflag > 0 {
			Errflag--
		}
		goto stlcstack
	}

stlcdefault:
	/* default state action */
	stlcn = int(stlcDef[stlcstate])
	if stlcn == -2 {
		if stlcrcvr.char < 0 {
			stlcrcvr.char, stlctoken = stlclex1(stlclex, &stlcrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if stlcExca[xi+0] == -1 && int(stlcExca[xi+1]) == stlcstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			stlcn = int(stlcExca[xi+0])
			if stlcn < 0 || stlcn == stlctoken {
				break
			}
		}
		stlcn = int(stlcExca[xi+1])
		if stlcn < 0 {
			goto ret0
		}
	}
	if stlcn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			stlclex.Error(stlcErrorMessage(stlcstate, stlctoken))
			Nerrs++
			if stlcDebug >= 1 {
				__yyfmt__.Printf("%s", stlcStatname(stlcstate))
				__yyfmt__.Printf(" saw %s\n", stlcTokname(stlctoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for stlcp >= 0 {
				stlcn = int(stlcPact[stlcS[stlcp].yys]) + stlcErrCode
				if stlcn >= 0 && stlcn < stlcLast {
					stlcstate = int(stlcAct[stlcn]) /* simulate a shift of "error" */
					if int(stlcChk[stlcstate]) == stlcErrCode {
						goto stlcstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if stlcDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", stlcS[stlcp].yys)
				}
				stlcp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if stlcDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", stlcTokname(stlctoken))
			}
			if stlctoken == stlcEofCode {
				goto ret1
			}
			stlcrcvr.char = -1
			stlctoken = -1
			goto stlcnewstate /* try again in the same state */
		}
	}

	/* reduction by production stlcn */
	if stlcDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", stlcn, stlcStatname(stlcstate))
	}

	stlcnt := stlcn
	stlcpt := stlcp
	_ = stlcpt // guard against "declared and not used"

	stlcp -= int(stlcR2[stlcn])
	// stlcp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if stlcp+1 >= len(stlcS) {
		nyys := make([]stlcSymType, len(stlcS)*2)
		copy(nyys, stlcS)
		stlcS = nyys
	}
	stlcVAL = stlcS[stlcp+1]

	/* consult goto table to find next state */
	stlcn = int(stlcR1[stlcn])
	stlcg := int(stlcPgo[stlcn])
	stlcj := stlcg + stlcS[stlcp].yys + 1

	if stlcj >= stlcLast {
		stlcstate = int(stlcAct[stlcg])
	} else {
		stlcstate = int(stlcAct[stlcj])
		if int(stlcChk[stlcstate]) != -stlcn {
			stlcstate = int(stlcAct[stlcg])
		}
	}
	// dummy call; replaced with literal code
	switch stlcnt {

	case 1:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlclex.(*stlcLex).cmds = stlcDollar[1].cl
		}
	case 2:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.cl = append(stlcVAL.cl, stlcDollar[1].c)
			stlcVAL.cl = append(stlcVAL.cl, stlcDollar[3].cl...)
		}
	case 3:
		stlcDollar = stlcS[stlcpt-0 : stlcpt+1]
		{
		}
	case 4:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.c = Eval{stlcDollar[1].x}
		}
	case 5:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.c = Bind{string(stlcDollar[1].text), VarBinding{stlcDollar[3].t}}
		}
	case 6:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.c = Bind{string(stlcDollar[1].text), TmAbbBind{Term: stlcDollar[3].x}}
		}
	case 7:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.c = Bind{string(stlcDollar[1].text), TyVarBind{}}
		}
	case 8:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.c = Bind{string(stlcDollar[1].text), TyAbbBind{stlcDollar[3].t}}
		}
	case 9:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[1].x
		}
	case 10:
		stlcDollar = stlcS[stlcpt-6 : stlcpt+1]
		{
			stlcVAL.x = If{stlcDollar[2].x, stlcDollar[4].x, stlcDollar[6].x}
		}
	case 11:
		stlcDollar = stlcS[stlcpt-6 : stlcpt+1]
		{
			stlcVAL.x = Abs{string(stlcDollar[2].text), stlcDollar[4].t, stlcDollar[6].x}
		}
	case 12:
		stlcDollar = stlcS[stlcpt-6 : stlcpt+1]
		{
			stlcVAL.x = Abs{"_", stlcDollar[4].t, stlcDollar[6].x}
		}
	case 13:
		stlcDollar = stlcS[stlcpt-6 : stlcpt+1]
		{
			stlcVAL.x = Let{string(stlcDollar[2].text), stlcDollar[4].x, stlcDollar[6].x}
		}
	case 14:
		stlcDollar = stlcS[stlcpt-6 : stlcpt+1]
		{
			stlcVAL.x = Let{"_", stlcDollar[4].x, stlcDollar[6].x}
		}
	case 15:
		stlcDollar = stlcS[stlcpt-4 : stlcpt+1]
		{
			stlcVAL.x = Case{stlcDollar[2].x, stlcDollar[4].cs}
		}
	case 16:
		stlcDollar = stlcS[stlcpt-8 : stlcpt+1]
		{
			stlcVAL.x = Let{string(stlcDollar[2].text), Fix{Abs{string(stlcDollar[2].text), stlcDollar[4].t, stlcDollar[6].x}}, stlcDollar[8].x}
		}
	case 17:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.cs = append(stlcVAL.cs, stlcDollar[1].ce)
		}
	case 18:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.cs = append(stlcVAL.cs, stlcDollar[1].ce)
			stlcVAL.cs = append(stlcVAL.cs, stlcDollar[3].cs...)
		}
	case 19:
		stlcDollar = stlcS[stlcpt-7 : stlcpt+1]
		{
			stlcVAL.ce = C{string(stlcDollar[2].text), string(stlcDollar[4].text), stlcDollar[7].x}
		}
	case 20:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[1].x
		}
	case 21:
		stlcDollar = stlcS[stlcpt-2 : stlcpt+1]
		{
			stlcVAL.x = App{stlcDollar[1].x, stlcDollar[2].x}
		}
	case 22:
		stlcDollar = stlcS[stlcpt-2 : stlcpt+1]
		{
			stlcVAL.x = Succ{stlcDollar[2].x}
		}
	case 23:
		stlcDollar = stlcS[stlcpt-2 : stlcpt+1]
		{
			stlcVAL.x = Fix{stlcDollar[2].x}
		}
	case 24:
		stlcDollar = stlcS[stlcpt-2 : stlcpt+1]
		{
			stlcVAL.x = IsZero{stlcDollar[2].x}
		}
	case 25:
		stlcDollar = stlcS[stlcpt-2 : stlcpt+1]
		{
			stlcVAL.x = Pred{stlcDollar[2].x}
		}
	case 26:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[1].x
		}
	case 27:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.x = Ascribe{stlcDollar[1].x, stlcDollar[3].t}
		}
	case 28:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[1].x
		}
	case 29:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.x = Proj{stlcDollar[1].x, string(stlcDollar[3].text)}
		}
	case 30:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.x = Proj{stlcDollar[1].x, strconv.Itoa(stlcDollar[3].intval)}
		}
	case 31:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[1].x
		}
	case 32:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.x = App{Abs{"_", TyUnit{}, stlcDollar[3].x}, stlcDollar[1].x}
		}
	case 33:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = True{}
		}
	case 34:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = False{}
		}
	case 35:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = Unit{}
		}
	case 36:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.x = Ident(stlcDollar[1].text)
		}
	case 37:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[2].x
		}
	case 38:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.x = stlcDollar[2].r
		}
	case 39:
		stlcDollar = stlcS[stlcpt-7 : stlcpt+1]
		{
			stlcVAL.x = Tag{string(stlcDollar[2].text), stlcDollar[4].x, stlcDollar[7].t}
		}
	case 40:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			var f func(int) Term
			f = func(n int) Term {
				if n == 0 {
					return Zero{}
				}
				return Succ{f(n - 1)}
			}
			stlcVAL.x = f(stlcDollar[1].intval)
		}
	case 41:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.r = Record{stlcDollar[1].f}
		}
	case 42:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.r = append(Record{stlcDollar[1].f}, stlcDollar[3].r...)
		}
	case 43:
		stlcDollar = stlcS[stlcpt-0 : stlcpt+1]
		{
		}
	case 44:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.f = Field{string(stlcDollar[1].text), stlcDollar[3].x}
		}
	case 45:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.f = Field{"", stlcDollar[1].x}
		}
	case 46:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.t = stlcDollar[1].t
		}
	case 47:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.t = TyArr{stlcDollar[1].t, stlcDollar[3].t}
		}
	case 48:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.t = TyBool{}
		}
	case 49:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.t = TyNat{}
		}
	case 50:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.t = TyUnit{}
		}
	case 51:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.t = stlcDollar[2].t
		}
	case 52:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.t = TyId(stlcDollar[1].text)
		}
	case 53:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.t = TyRecord(stlcDollar[2].tr)
		}
	case 54:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.t = TyVariant(stlcDollar[2].tr)
		}
	case 55:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.tr = []TyField{stlcDollar[1].tf}
		}
	case 56:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.tr = append([]TyField{stlcDollar[1].tf}, stlcDollar[3].tr...)
		}
	case 57:
		stlcDollar = stlcS[stlcpt-0 : stlcpt+1]
		{
		}
	case 58:
		stlcDollar = stlcS[stlcpt-3 : stlcpt+1]
		{
			stlcVAL.tf = TyField{string(stlcDollar[1].text), stlcDollar[3].t}
		}
	case 59:
		stlcDollar = stlcS[stlcpt-1 : stlcpt+1]
		{
			stlcVAL.tf = TyField{"", stlcDollar[1].t}
		}
	}
	goto stlcstack /* stack new state and value */
}
